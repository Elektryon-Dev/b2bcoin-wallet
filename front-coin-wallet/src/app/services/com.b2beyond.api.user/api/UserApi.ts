/**
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class UserApi {
    protected basePath = 'http://localhost:8080/user/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor (protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param websiteId
     * @param activationToken
     */
    public activateUser (websiteId: number, activationToken: string, extraHttpRequestParams?: any): Observable<models.User> {
        return this.activateUserWithHttpInfo(websiteId, activationToken, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Prepare the login module for preview or creation
     * Prepare the login module for preview or creation
     * @param body
     */
    public build (body?: any, extraHttpRequestParams?: any): Observable<models.BuildableResponse> {
        return this.buildWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Copy the login properties fragments by ID
     * Returns the new copied fragments
     * @param body
     */
    public copyProperties (body?: models.LoginPropertiesCopy, extraHttpRequestParams?: any): Observable<Array<models.LoginProperties>> {
        return this.copyPropertiesWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete the user by ID
     * Deletes the user, returns a boolean
     * @param body
     */
    public deleteFragment (body?: models.User, extraHttpRequestParams?: any): Observable<boolean> {
        return this.deleteFragmentWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete the component property by ID
     * Deletes the component property, returns a boolean
     * @param body
     */
    public deleteProperties (body?: any, extraHttpRequestParams?: any): Observable<boolean> {
        return this.deletePropertiesWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public forgotPassword (body?: models.User, extraHttpRequestParams?: any): Observable<models.WebMessage> {
        return this.forgotPasswordWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns the form of the properties
     * Returns the form of the properties
     */
    public getFormSkeleton (extraHttpRequestParams?: any): Observable<string> {
        return this.getFormSkeletonWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get the html exposed tags
     * Get the tag names that can be used in the pages
     */
    public getHtmlTags (extraHttpRequestParams?: any): Observable<Array<models.TagName>> {
        return this.getHtmlTagsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get the login properties
     * Get the login properties for a site and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public getProperties (body?: any, extraHttpRequestParams?: any): Observable<models.LoginProperties> {
        return this.getPropertiesWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Returns the skeleton of the properties
     * Returns the skeleton of the properties that can be saved by the service to use later
     */
    public getPropertiesSkeleton (extraHttpRequestParams?: any): Observable<string> {
        return this.getPropertiesSkeletonWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Is the Service running ?
     * Returns if the service runs or not. Without other exceptions in mind, just running
     */
    public getResourceInfo (extraHttpRequestParams?: any): Observable<models.RestResourceInfo> {
        return this.getResourceInfoWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find the user by ID
     * Returns the user for the given ID.
     * @param body
     */
    public login (body?: models.User, extraHttpRequestParams?: any): Observable<{}> {
        return this.loginWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Refresh the JWT Token
     * Based on the refresh token if it passed the JWTFilter
     * @param body
     */
    public refresh (body?: models.User, extraHttpRequestParams?: any): Observable<{}> {
        return this.refreshWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Register the user
     * Register the user and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public register (body?: models.User, extraHttpRequestParams?: any): Observable<models.User> {
        return this.registerWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param websiteId
     * @param passwordResetToken
     * @param body
     */
    public resetPassword (websiteId: number, passwordResetToken: string, body?: models.User, extraHttpRequestParams?: any): Observable<models.User> {
        return this.resetPasswordWithHttpInfo(websiteId, passwordResetToken, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Save the login properties
     * Save the login properties and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public saveProperties (body?: models.LoginProperties, extraHttpRequestParams?: any): Observable<models.LoginProperties> {
        return this.savePropertiesWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update the user
     * Update the user and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public updateFragment (body?: models.User, extraHttpRequestParams?: any): Observable<models.User> {
        return this.updateFragmentWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Save the login properties
     * Save the login properties and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public updateProperties (body?: models.LoginProperties, extraHttpRequestParams?: any): Observable<models.LoginProperties> {
        return this.updatePropertiesWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Validate the login module for preview or creation
     * Validate the login module for preview or creation
     * @param body
     */
    public validate (body?: models.PrepareComponent, extraHttpRequestParams?: any): Observable<models.PrepareComponent> {
        return this.validateWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param websiteId
     * @param activationToken
     */
    public activateUserWithHttpInfo (websiteId: number, activationToken: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/activate/${websiteId}/${activationToken}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'websiteId' is not null or undefined
        if (websiteId === null || websiteId === undefined) {
            throw new Error('Required parameter websiteId was null or undefined when calling activateUser.');
        }
        // verify required parameter 'activationToken' is not null or undefined
        if (activationToken === null || activationToken === undefined) {
            throw new Error('Required parameter activationToken was null or undefined when calling activateUser.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Prepare the login module for preview or creation
     * Prepare the login module for preview or creation
     * @param body
     */
    public buildWithHttpInfo (body?: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/prepare`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Copy the login properties fragments by ID
     * Returns the new copied fragments
     * @param body
     */
    public copyPropertiesWithHttpInfo (body?: models.LoginPropertiesCopy, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/copy`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete the user by ID
     * Deletes the user, returns a boolean
     * @param body
     */
    public deleteFragmentWithHttpInfo (body?: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/delete`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete the component property by ID
     * Deletes the component property, returns a boolean
     * @param body
     */
    public deletePropertiesWithHttpInfo (body?: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/deleteProperty`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public forgotPasswordWithHttpInfo (body?: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/forgotPassword`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns the form of the properties
     * Returns the form of the properties
     */
    public getFormSkeletonWithHttpInfo (extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/formSkeleton`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [];

        // to determine the Accept header
        let produces: string[] = [];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get the html exposed tags
     * Get the tag names that can be used in the pages
     */
    public getHtmlTagsWithHttpInfo (extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/exposedTags`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get the login properties
     * Get the login properties for a site and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public getPropertiesWithHttpInfo (body?: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/getProperties`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Returns the skeleton of the properties
     * Returns the skeleton of the properties that can be saved by the service to use later
     */
    public getPropertiesSkeletonWithHttpInfo (extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/propertiesSkeleton`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [];

        // to determine the Accept header
        let produces: string[] = [];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Is the Service running ?
     * Returns if the service runs or not. Without other exceptions in mind, just running
     */
    public getResourceInfoWithHttpInfo (extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/info`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [];

        // to determine the Accept header
        let produces: string[] = [];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find the user by ID
     * Returns the user for the given ID.
     * @param body
     */
    public loginWithHttpInfo (body?: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/login`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Refresh the JWT Token
     * Based on the refresh token if it passed the JWTFilter
     * @param body
     */
    public refreshWithHttpInfo (body?: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/refresh`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Register the user
     * Register the user and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public registerWithHttpInfo (body?: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/register`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param websiteId
     * @param passwordResetToken
     * @param body
     */
    public resetPasswordWithHttpInfo (websiteId: number, passwordResetToken: string, body?: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/resetPassword/${websiteId}/${passwordResetToken}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'websiteId' is not null or undefined
        if (websiteId === null || websiteId === undefined) {
            throw new Error('Required parameter websiteId was null or undefined when calling resetPassword.');
        }
        // verify required parameter 'passwordResetToken' is not null or undefined
        if (passwordResetToken === null || passwordResetToken === undefined) {
            throw new Error('Required parameter passwordResetToken was null or undefined when calling resetPassword.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Save the login properties
     * Save the login properties and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public savePropertiesWithHttpInfo (body?: models.LoginProperties, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/saveProperties`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update the user
     * Update the user and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public updateFragmentWithHttpInfo (body?: models.User, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/update`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Save the login properties
     * Save the login properties and returns it if all went ok, else 500 is thrown
     * @param body
     */
    public updatePropertiesWithHttpInfo (body?: models.LoginProperties, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/updateProperties`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Validate the login module for preview or creation
     * Validate the login module for preview or creation
     * @param body
     */
    public validateWithHttpInfo (body?: models.PrepareComponent, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/user/validate`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
